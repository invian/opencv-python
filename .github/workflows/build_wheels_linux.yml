name: Linux x86_64

on:
  pull_request:
    branches:
      - master
      - 3.4
      - 4.x
      - 5.x
    paths-ignore:
      - '.github/workflows/build_wheels_linux_arm.yml'
      - '.github/workflows/build_wheels_windows*'
      - '.github/workflows/build_wheels_macos*'
  release:
    types: [published, edited]
  workflow_dispatch:


jobs:
  Build:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8']
        platform: [x64]
        with_contrib: [1]
        without_gui: [1]
        build_sdist: [0]
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      REPO_DIR: .
      PROJECT_SPEC: opencv-python
      MB_PYTHON_VERSION: ${{ matrix.python-version }}
      TRAVIS_PYTHON_VERSION: ${{ matrix.python-version }}
      MB_ML_VER: 2014
      TRAVIS_BUILD_DIR: ${{ github.workspace }}
      CONFIG_PATH: travis_config.sh
      DOCKER_IMAGE: quay.io/opencv-ci/opencv-python-manylinux2014-x86-64:20230117
      USE_CCACHE: 0
      UNICODE_WIDTH: 32
      PLAT: x86_64
      SDIST: ${{ matrix.build_sdist || 0 }}
      ENABLE_HEADLESS: ${{ matrix.without_gui }}
      ENABLE_CONTRIB: ${{ matrix.with_contrib }}

    steps:
    - name: Cleanup
      run: find . -mindepth 1 -delete
      working-directory: ${{ github.workspace }}
    - name: Setup environment
      run: |
        if [[ "${{ github.event_name }}" == "schedule" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "ENABLE_ROLLING=1" >> $GITHUB_ENV
        fi
    - name: Install dependencies
      run: |
        sudo apt-get update && \
        sudo apt-get dist-upgrade -y --autoremove && \
        sudo apt-get install -y \
          build-essential \
          cmake \
          git \
          gfortran \
          python3.8-dev \
          python3-pip \
          libatlas-base-dev \
          libavcodec-dev \
          libavformat-dev \
          libavresample-dev \
          libdc1394-22-dev \
          libeigen3-dev \
          libglew-dev \
          libgstreamer-plugins-base1.0-dev \
          libgstreamer-plugins-good1.0-dev \
          libgstreamer1.0-dev \
          libjpeg-dev \
          libjpeg8-dev \
          libjpeg-turbo8-dev \
          liblapack-dev \
          liblapacke-dev \
          libopenblas-dev \
          libpng-dev \
          libpostproc-dev \
          libswscale-dev \
          libtbb-dev \
          libtbb2 \
          libtiff-dev \
          libv4l-dev \
          libxine2-dev \
          libxvidcore-dev \
          libx264-dev \
          pkg-config \
          qv4l2 \
          v4l-utils \
          zlib1g-dev

    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: false
        fetch-depth: 0
    - name: Build a package
      run: source scripts/build.sh
    - name: Saving all wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels
        path: wheelhouse/opencv*.whl
    - name: Saving a wheel accordingly to matrix
      uses: actions/upload-artifact@v3
      with:
        name: wheel-${{ matrix.with_contrib }}-${{ matrix.without_gui }}-${{ matrix.build_sdist }}
        path: wheelhouse/opencv*.whl

  Test:
    needs: [Build]
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8']
        platform: [x64]
        with_contrib: [1]
        without_gui: [1]
        build_sdist: [0]
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      MB_PYTHON_VERSION: ${{ matrix.python-version }}
      NP_TEST_DEP: numpy==1.19.4
      NP_TEST_DEP_LATEST: numpy==1.24.0
      CONFIG_PATH: travis_config.sh
      PLAT: x86_64
    steps:
    - name: Cleanup
      run: find . -mindepth 1 -delete
      working-directory: ${{ github.workspace }}
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: true
        fetch-depth: 0
    - name: Setup Environment variables
      run: if [ "3.10" == "${{ matrix.python-version }}" -o "3.11" == "${{ matrix.python-version }}" ]; then echo "TEST_DEPENDS=$(echo $NP_TEST_DEP_LATEST)" >> $GITHUB_ENV; else echo "TEST_DEPENDS=$(echo $NP_TEST_DEP)" >> $GITHUB_ENV; fi
    - name: Download a wheel accordingly to matrix
      uses: actions/download-artifact@v3
      with:
        name: wheel-${{ matrix.with_contrib }}-${{ matrix.without_gui }}-${{ matrix.build_sdist }}
        path: wheelhouse/
    - name: Package installation and run tests
      run: source scripts/install.sh

  Build_sdist:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8]
        platform: [x64]
        with_contrib: [1]
        without_gui: [1]
        build_sdist: [1]
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      REPO_DIR: .
      PROJECT_SPEC: opencv-python
      PLAT: x86_64
      MB_PYTHON_VERSION: ${{ matrix.python-version }}
      TRAVIS_PYTHON_VERSION: ${{ matrix.python-version }}
      MB_ML_VER: 2014
      NP_TEST_DEP: numpy==1.19.4
      TRAVIS_BUILD_DIR: ${{ github.workspace }}
      CONFIG_PATH: travis_config.sh
      DOCKER_IMAGE: quay.io/opencv-ci/opencv-python-manylinux2014-x86-64:20230117
      USE_CCACHE: 1
      UNICODE_WIDTH: 32
      SDIST: ${{ matrix.build_sdist || 0 }}
      ENABLE_HEADLESS: ${{ matrix.without_gui || 0 }}
      ENABLE_CONTRIB: ${{ matrix.with_contrib || 0 }}
    steps:
    - name: Cleanup
      run: find . -mindepth 1 -delete
      working-directory: ${{ github.workspace }}
    - name: Setup environment
      run: |
        if [[ "${{ github.event_name }}" == "schedule" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "ENABLE_ROLLING=1" >> $GITHUB_ENV
        fi
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: false
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.platform }}
    - name: Build a package
      run: |
        set -e
        # Build and package
        set -x
          python -m pip install --upgrade pip
          python -m pip install scikit-build
          python setup.py sdist --formats=gztar
        set +x
        # Install and run tests
        set -x
        echo "skipping tests because of sdist"
    - name: saving artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wheels
        path: dist/opencv*.tar.gz

  Pre-release:
    if: github.event_name == 'release' && github.event.release.prerelease
    needs: [Build, Build_sdist, Test]
    runs-on: ubuntu-20.04
    environment: test-opencv-python-release
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: wheelhouse/
      - name: Upload all wheels
        run: |
          python -m pip install twine
          TWINE_PASSWORD=${{ secrets.PYPI_PASSWORD }} TWINE_USERNAME=${{ secrets.PYPI_USERNAME }} python -m twine upload --repository-url ${{ secrets.PYPI_REPOSITORY }} --skip-existing wheelhouse/opencv_* wheelhouse/opencv-*
